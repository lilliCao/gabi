version: '2'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    restart: on-failure
    networks:
      - gabi
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    restart: on-failure
    networks:
      - gabi
    ports:
      - "9092:9092"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "kafka"
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_BROKER_ID: 1
      KAFKA_CREATE_TOPICS: "dad.price.0:1:1,\
          dad.market_factor.0:1:1,\
          dad.news.0:1:1,\
          dad.tweet.0:1:1"
    depends_on:
      - zookeeper

  mongo:
    image: mongo
    restart: always
    networks:
      - gabi
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example

  price-factors-crawler:
    build:
      context: ../services/price-factors-crawler
    networks:
      - gabi
    volumes:
      - ../services/price-factors-crawler:/app
      - /app/node_modules
    environment:
      - "FXCM_TOKEN=0004ac72171d396154ddaebc87487cf326cfdd1e"

  tweet-crawler:
    build:
      context: ../services/tweet-crawler
    networks:
      - gabi
    restart: on-failure
    volumes:
      - ../services/tweet-crawler:/app
    environment:
      - "TOPIC=dad.tweet.0"
      - DEBUG=n
      - "KAFKA=kafka:9092"

  viewer:
    build:
      context: ../services/view
    networks:
      - gabi
    restart: on-failure
    volumes:
      -  ../services/view:/app
    environment:
      - "TOPIC=dad.tweet.0"
      - "KAFKA=kafka:9092"
      - "ELASTICSEARCH=http://elasticsearch:9200"

networks:
  gabi:
    driver: bridge
